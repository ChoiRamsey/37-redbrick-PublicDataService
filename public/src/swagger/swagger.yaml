openapi: 3.0.0
info:
  version: 0.0.1
  title: Public Data API
  description: 공공데이터 API 조회
  license:
    name: mascoeskimmascoeskim

servers:
  - url: http://localhost:3000/
components:
  parameters: null
  #Schemas : model 정보
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
paths:
  /news/{category}/{year}:
    get:
      tags:
        - 뉴스 빅데이터 조회
      description: 2020~2021 코로나 및 메타버스 뉴스 빅데이터 조회하기
      operationId: ApiTodoGet
      parameters:
        - name: category
          in: path
          description: 카테고리 선택
          required: true
          schema:
            type: string
            enum:
              - metabus
              - corona
        - name: year
          in: path
          description: 연도 선택
          required: true
          schema:
            type: string
            enum:
              - '2007'
              - '2020'
              - '2021'
      responses:
        '200':
          description: 데이터 통신 성공
          content:
            application/json:
              schema:
              example:
                data:
                  - 기고자: string
                    본문: string
                    언론사: string
                    원본주소: string
                    일자: date
                    제목: string
                    주소: string
                    키워드: array
                    통합 분류1: string
                    특성추출: array
        '400':
          description: 데이터가 존재하지 않음
          content:
            application/json:
              schema:
              example:
                message: DATA DOESN'T EXIST
        '500':
          description: 서버 에러
          content:
            application/json:
              schema:
              example:
                message: SERVER ERROR!

  /metro:
    get:
      tags:
        - 지하철
      summary: 역 이름을 입력하면 지하철 도착정보를 반환
      description: 도착시간을 조회할 서울 내 지하철 역명을 입력해주세요 ex)선릉,사당역 등..
      consumes:
        - application/json
      parameters:
        - name: 'station'
          in: 'query'
          description: '지하철 역명'
          required: 'true'
          type: 'string'

      responses:
        '200':
          description: 입력한 지하철 도착정보를 성공적으로 전송함
            <br><br><br>subwayId = 지하철호선ID
            <br>updnLine = 상하행선구분 (2호선 - (내선-0,외선-1),상행,하행)
            <br>trainLineNm = 도착지방면 (성수행 - 구로디지털단지방면)
            <br>subwayHeading = 내리는문방향 (오른쪽,왼쪽)
            <br>statnFid = 이전지하철역ID
            <br>statnTid = 다음지하철역ID
            <br>statnId = 지하철역ID
            <br>statnNm = 지하철역명
            <br>trnsitCo = 환승노선수
            <br>Rordkey = 도착예정열차순번 (상하행코드(1자리), 순번(첫번째, 두번째 열차 , 1자리), 첫번째 도착예정 정류장 - 현재 정류장(3자리), 목적지 정류장, 급행여부(1자리))
            <br>subwayList = 연계호선ID
            <br>statnList = 연계지하철역ID (1002000233,1007000744)
            <br>btrainSttus = 열차종류
            <br>barvlDt = 열차도착예정시간 (단위-초)
            <br>btrainNo = 열차번호
            <br>bstatnId = 종착지하철역ID
            <br>bstatnNm = 종착지하철역명
            <br>recptnDt = 열차도착정보를 생성한 시각
            <br>arvlMsg2 = 첫번째도착메세지
            <br>arvlMsg3 = 두번째도착메세지
            <br>arvlCd = 도착코드(0:진입, 1:도착, 2:출발, 3:전역출발, 4:전역진입, 5:전역도착, 99:운행중)
          content:
            application/json:
              schema:
                type: object
                example:
                  - beginRow: null
                    endRow: null
                    curPage: null
                    pageRow: null
                    totalCount: 9
                    rowNum: 1
                    selectedCount: 9
                    subwayId: '1004'
                    subwayNm: null
                    updnLine: 상행
                    trainLineNm: 당고개행 - 총신대입구(이수)방면
                    subwayHeading: 오른쪽
                    statnFid: '1004000434'
                    statnTid: '1004000432'
                    statnId: '1004000433'
                    statnNm: 사당
                    trainCo: null
                    ordkey: 01001당고개0
                    subwayList: '1002,1004'
                    statnList: '1002000226,1004000433'
                    btrainSttus: null
                    barvlDt: '155'
                    btrainNo: '4594'
                    bstatnId: '0'
                    bstatnNm: 당고개
                    recptnDt: '2022-10-20 13:21:31.0'
                    arvlMsg2: 전역 도착
                    arvlMsg3: 남태령
                    arvlCd: '5'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
              example:
                message: PLEASE_CHECK_STAION_NAME
        '500':
          description: 서버 에러
          content:
            application/json:
              schema:
              example:
                message: 서버 내부 오류

  /metro/passenger:
    get:
      tags:
        - 지하철
      summary: 2호선 내 지하철역 이름을 입력하면 시간별 일일 통행인원 정보를 반환
      description: 통행인원을 조회할 2호선 지하철 역명을 입력해주세요 ex)선릉,사당역 등..
      consumes:
        - application/json
      parameters:
        - name: 'station'
          in: 'query'
          description: '지하철 역명(현재 2호선만 가능)'
          type: 'string'

      responses:
        '200':
          description: 입력한 지하철 도착정보를 성공적으로 전송함
            <br><br><br>Key = 시간대_승/하차객
            <br>ex) "SEVEN_RIDE_NUM" = 7시 승차객
            <br>    "EIGHTEEN_ALIGHT_NUM  = 18시 하차객

          content:
            application/json:
              schema:
                type: object
                example:
                  - {
                      'USE_MON': '202209',
                      'LINE_NUM': '2호선',
                      'SUB_STA_NM': '사당',
                      'FOUR_RIDE_NUM': 4,
                      'FOUR_ALIGHT_NUM': 0,
                      'FIVE_RIDE_NUM': 392,
                      'FIVE_ALIGHT_NUM': 132,
                      'SIX_RIDE_NUM': 869,
                      'SIX_ALIGHT_NUM': 1002,
                      'SEVEN_RIDE_NUM': 2437,
                      'SEVEN_ALIGHT_NUM': 1504,
                      'EIGHT_RIDE_NUM': 3400,
                      'EIGHT_ALIGHT_NUM': 2187,
                      'NINE_RIDE_NUM': 2506,
                      'NINE_ALIGHT_NUM': 1710,
                      'TEN_RIDE_NUM': 1590,
                      'TEN_ALIGHT_NUM': 1381,
                      'ELEVEN_RIDE_NUM': 1403,
                      'ELEVEN_ALIGHT_NUM': 1592,
                      'TWELVE_RIDE_NUM': 1616,
                      'TWELVE_ALIGHT_NUM': 1667,
                      'THIRTEEN_RIDE_NUM': 1650,
                      'THIRTEEN_ALIGHT_NUM': 1603,
                      'FOURTEEN_RIDE_NUM': 1750,
                      'FOURTEEN_ALIGHT_NUM': 1623,
                      'FIFTEEN_RIDE_NUM': 1822,
                      'FIFTEEN_ALIGHT_NUM': 1957,
                      'SIXTEEN_RIDE_NUM': 2014,
                      'SIXTEEN_ALIGHT_NUM': 2550,
                      'SEVENTEEN_RIDE_NUM': 2442,
                      'SEVENTEEN_ALIGHT_NUM': 3671,
                      'EIGHTEEN_RIDE_NUM': 2970,
                      'EIGHTEEN_ALIGHT_NUM': 5262,
                      'NINETEEN_RIDE_NUM': 2043,
                      'NINETEEN_ALIGHT_NUM': 3645,
                      'TWENTY_RIDE_NUM': 1898,
                      'TWENTY_ALIGHT_NUM': 2149,
                      'TWENTY_ONE_RIDE_NUM': 2009,
                      'TWENTY_ONE_ALIGHT_NUM': 2052,
                      'TWENTY_TWO_RIDE_NUM': 1930,
                      'TWENTY_TWO_ALIGHT_NUM': 2062,
                      'TWENTY_THREE_RIDE_NUM': 1084,
                      'TWENTY_THREE_ALIGHT_NUM': 1302,
                      'MIDNIGHT_RIDE_NUM': 183,
                      'MIDNIGHT_ALIGHT_NUM': 370,
                      'ONE_RIDE_NUM': 1,
                      'ONE_ALIGHT_NUM': 24,
                      'TWO_RIDE_NUM': 0,
                      'TWO_ALIGHT_NUM': 0,
                      'THREE_RIDE_NUM': 0,
                      'THREE_ALIGHT_NUM': 0,
                      'WORK_DT': '20221003',
                    }
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
              example:
                message: PLEASE_CHECK_STAION_NAME
        '500':
          description: 서버 에러
          content:
            application/json:
              schema:
              example:
                message: 서버 내부 오류
  /bus/stop/{keyword}:
    get:
      tags:
        - BUS
      summary: 키워드를 통한 버스정류장 조회 기능
      description: 키워드가 포함된 버스정류장명을 위/경도와 함께 조회할 수 있습니다.
      operationId: getBusStops
      parameters:
        - name: keyword
          in: path
          description: 버스정류장명에 포함시킬 키워드(예시 - 강남역)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 사용자가 서버로 전달하는 값에 따라 결과 값은 다릅니다. (유저 조회)
          content:
            application/json:
              schema:
              type: array
              example:
                [
                  {
                    'STOP_NO': '22009',
                    'STOP_NM': '신분당선강남역',
                    'XCODE': '127.0284005454',
                    'YCODE': '37.4960417459',
                  },
                  { 'STOP_NO': '22010', 'STOP_NM': '신분당선강남역', 'XCODE': '127.029112', 'YCODE': '37.494993' },
                ]
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
              type: object
              example: { 'message': '유효하지 않은 정보입니다.' }
  /bus/passenger?busNum=:
    get:
      tags:
        - BUS
      summary: 당월 버스별 출근시간 승객 수 조회 기능
      description: 버스 노선별 출근시간(06:00~09:00) 내 승/하차 승객 수를 조회할 수 있습니다.
      operationId: getPassengersByLine
      parameters:
        - name: busNum
          in: query
          description: 조회할 버스 노선 번호(예시 - 0017)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 사용자가 서버로 전달하는 값에 따라 결과 값은 다릅니다. (유저 조회)
          content:
            application/json:
              schema:
              type: array
              example:
                [
                  {
                    '버스정류장명': '청암자이아파트(00001)',
                    '6시 하차 승객 수': 0,
                    '6시 승차 승객 수': 24,
                    '7시 승차 승객 수': 65,
                    '7시 하차 승객 수': 0,
                    '8시 승차 승객 수': 36,
                    '8시 하차 승객 수': 0,
                    '9시 승차 승객 수': 15,
                    '9시 하차 승객 수': 1,
                  },
                  {
                    '버스정류장명': '용산전자상가입구(00010)',
                    '6시 하차 승객 수': 26,
                    '6시 승차 승객 수': 12,
                    '7시 승차 승객 수': 98,
                    '7시 하차 승객 수': 102,
                    '8시 승차 승객 수': 95,
                    '8시 하차 승객 수': 153,
                    '9시 승차 승객 수': 99,
                    '9시 하차 승객 수': 118,
                  },
                ]
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
              type: object
              example: { 'message': '유효하지 않은 정보입니다.' }

  /shortTerm:
    get:
      tags:
        - wether
      summary: '초단기실황조회'
      description: '요청 경로에 값을 담아 서버에 보낸다.'
      parameters:
        - in: query
          name: serviceKey
          required: true
          description: serviceKey
          schema:
            type: string
        - in: query
          name: numOfRows
          required: true
          description: 페이지 당 row 수
          schema:
            type: string
        - in: query
          name: pageNo
          required: true
          description: 페이지 번호
          schema:
            type: number
        - in: query
          name: base_date
          required: true
          description: 발표일자 (yyyymmdd)
          schema:
            type: string
        - in: query
          name: base_time
          required: true
          description: 발표시각 (hhmm)
          schema:
            type: string
        - in: query
          name: nx
          required: true
          description: 위도
          schema:
            type: number
        - in: query
          name: ny
          required: true
          description: 경도
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
              type: array
              example:
                [
                  {
                    'baseDate': '20221020',
                    'baseTime': '0600',
                    'category': 'PTY',
                    'nx': 55,
                    'ny': 127,
                    'obsrValue': '0',
                  },
                ]
  /airForecast:
    get:
      tags:
        - wether
      summary: '공항 이륙예보 조회'
      description: '요청 경로에 값을 담아 서버에 보낸다.'
      parameters:
        - in: query
          name: pageNo
          required: true
          description: 페이지 수
          schema:
            type: string
        - in: query
          name: numOfRows
          required: true
          description: 페이지 당 row 수
          schema:
            type: string
        - in: query
          name: fctm
          required: true
          description: 발표연월일시분
          schema:
            type: string
        - in: query
          name: icaoCode
          required: true
          description: icaoCode
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
              type: array
              example:
                [
                  {
                    'icaoCode': 'RKJB',
                    'airportName': '무안공항',
                    'tmFc': '202109120000',
                    'wd': '30',
                    'ws': '6',
                    'ta': '24',
                    'qnh': '2988',
                  },
                ]
